{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Template: Mapper/Reducer": {
		// "scope": "javascript,typescript",
		"prefix": "temp-MRJob",
		"body": [
			"%%file $1.py",
			"# Step 0: create a new file (lower cased + underscored).",
			"",
			"# Step 1: import MRJob.",
			"from mrjob.job import MRJob",
			"",
			"# Step 2: create a class that inherits from MRJob.",
			"class $1(MRJob):",
			"  # Step 3: create mapper.",
			"  def mapper(self, _, line):",
			"    pass",
			"",
			"  # Step 4: create reducer.",
			"  def reducer(self, key, values):",
			"    pass",
			"",
			"# Step 5: set up main to run program.",
			"if __name__ == \"__main__\":",
			"  $1.run()"
			"",
			// END
		],
		"description": "Creates a template for MRJob."
	}
}
